import org.gradle.api.artifacts.*

apply plugin: 'base' // To add "clean" task to the root project.

subprojects {
    apply from: rootProject.file('common.gradle')
}

def moduleDir = new File("${project('FlowPro').projectDir}/modules")
    if (!moduleDir.exists()) {
        moduleDir.mkdirs()
    }

    project(':Aerodynamics') {
        dependencies {
            implementation project(':FlowProAPI')
        }

        task copyJar << {
            def File modelProjectDir = new File("${rootDir}/ModuleProjects")
            def File projectDir = new File("${projectDir}")

            def srcFile = jar.outputs.files.getFiles()[0]
            def relPath =  modelProjectDir.toPath().relativize(projectDir.toPath())
            def modulJarDir = new File(moduleDir.toPath().toString() + '/' + relPath)
            if (!modulJarDir.exists()) {
                modulJarDir.mkdirs()
            }
            def destFile = new File(modulJarDir.toPath().toString() + "/${project.name}.jar")
            
            destFile << srcFile.bytes
        }
    
        build.finalizedBy(copyJar)
    }

    project(':FlowPro') {
        dependencies {
            implementation project(':FlowProAPI')
        }
    }

    task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
        title = 'All modules'
        destinationDir = new File(project.buildDir, 'merged-javadoc')

        // Note: The closures below are executed lazily.
        source {
            subprojects*.sourceSets*.main*.allSource
        }
        classpath.from {
            subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
        }
    }

    // buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }
